import streamlit as st
import altair as alt
import ipeadatapy as ipea
import pandas as pd
import time
import datetime



# Page Configuration:
st.set_page_config(
    page_title="Calculadora da Regra do 72",
    page_icon="üí∏",
    layout="centered",
    initial_sidebar_state="expanded")
alt.themes.enable("dark")
now = datetime.datetime.now()
current_year = now.year

def main():
    cs_sidebar()
    cs_body()
    return None



# Fun√ß√£o de C√°lculo do Dividend Yield:
def calc_yield(preco_ativo, dividendo):
    dy = (dividendo*100)/preco_ativo
    dy = str("{:.2f}".format(dy))
    st.subheader("O Dividend Yield do ativo √©: " + dy + "%")

# Fun√ß√£o de C√°lculo do Pre√ßo M√©dio:
def calc_pm(qtd_anterior, preco_anterior, qtd_adicional, preco_adicional):
    tot_abs = (qtd_anterior * preco_anterior) + (qtd_adicional * preco_adicional)
    pm = tot_abs / (qtd_anterior + qtd_adicional)
    pm = str(pm)
    st.subheader("O pre√ßo m√©dio √©: R$ " + pm)

# Fun√ß√£o de C√°lculo do Custo Operacional:
def custo_operacional(numero_acoes, custo_acoes):
    taxa_b3 = 0.0003
    taxa_IR = 0.00005
    custo_aquisicao = numero_acoes * custo_acoes
    custo_operacional = custo_aquisicao + ((custo_aquisicao*taxa_b3)+(custo_aquisicao*taxa_IR))
    custo_operacional = str(custo_operacional)
    st.subheader("O custo operacional total √©: R$ " + custo_operacional)

# Fun√ß√£o de C√°lculo da Regra do 72:
def regra_72(taxa_juros):
    anos = 72 / taxa_juros
    anos = str(anos)
    st.subheader("O investimento levar√° " + anos + " anos para duplicar de valor.")

# Fun√ß√£o de Obten√ß√£o de Hist√≥rico IPCA/SELIC:
def get_macro_economics():
    dfIPCA = ipea.timeseries('PRECOS12_IPCAG12',yearGreaterThan=1997)
    dfIPCA.drop(['CODE', 'RAW DATE', 'DAY', 'MONTH', 'YEAR'], axis=1, inplace=True)
    dfSELIC = ipea.timeseries('BM12_TJOVER12',yearGreaterThan=1997)
    dfSELIC.drop(['CODE', 'RAW DATE', 'DAY', 'MONTH', 'YEAR'], axis=1, inplace=True)
    df = pd.merge(dfSELIC, dfIPCA, on='DATE')
    df.columns = ["SELIC", "IPCA"]
    st.bar_chart(df)


# Sidebar:
def cs_sidebar():
    df_ipca = ipea.timeseries('PRECOS12_IPCAG12',yearGreaterThan=(current_year-1))
    df_ipca.drop(['CODE', 'RAW DATE', 'DAY', 'MONTH', 'YEAR'], axis=1, inplace=True)
    df_selic = ipea.timeseries('BM12_TJOVER12',yearGreaterThan=(current_year-1))
    df_selic.drop(['CODE', 'RAW DATE', 'DAY', 'MONTH', 'YEAR'], axis=1, inplace=True)
    st.sidebar.markdown("#### IPCA (√ölt. 3m):")
    st.sidebar.dataframe(df_ipca.tail(3))
    st.sidebar.markdown("#### SELIC (√ölt. 3m):")
    st.sidebar.dataframe(df_selic.tail(3))
    st.sidebar.markdown('''<small>Made with ‚ù§Ô∏è by [amsse](https://amsse.github.io/)</small>''', unsafe_allow_html=True)
    return None




# P√°gina:
def cs_body():
    st.title(':green[ProfitView]')
    st.markdown('##### Calculadoras e Ferramentas')
    st.text('')
    st.text('')
    st.text('')
    st.text('')
    st.text('')

    # Dividend Yield:
    with st.expander('ü™ô Calculadora do Dividend Yield'):
        with st.popover("?"):
            st.markdown(''' Calcula o retorno percentual que o rendimento distruibu√≠do gerou,  
                        considerando o pre√ßo m√©dio do ativo.''')
        preco_medio = st.number_input('Pre√ßo M√©dio (R$): ')
        dividendo = st.number_input('Dividendo (R$): ')
        if st.button(':green[Calcular Div. Yield]'):
            calc_yield(preco_medio, dividendo)

    # Pre√ßo M√©dio:
    with st.expander('üí∞ Calculadora de Pre√ßo M√©dio'):
        with st.popover("?"):
            st.markdown(''' Insira os dados nos campos adequados - cuidando para utilizar pontos  
                para separar casas decimais - e a calculadora retornar√° o pre√ßo m√©dio  
                dos ativos. ''')
        col1, col2 = st.columns(2)
        col3, col4 = st.columns(2)
        qtd_anterior = col1.number_input('Quantidade de cotas: ')
        preco_anterior = col2.number_input('Pre√ßo anterior: ')
        qtd_adicional = col3.number_input('Quantidade de novas cotas: ')
        preco_adicional = col4.number_input('Pre√ßo das novas aquisi√ß√µes: ')
        if st.button(':green[Calcular Pre√ßo M√©dio]'):
            calc_pm(qtd_anterior, preco_anterior, qtd_adicional, preco_adicional)

    # Custo Operacional:
    with st.expander('üßæ Calculadora de Custo Operacional'):
        with st.popover("?"):
            st.markdown(''' Nas opera√ß√µes de compra ou venda √† vista de a√ß√µes ou fundos, h√° a  
                        incid√™ncia de taxa de negocia√ß√£o, taxa de liquida√ß√£o e taxa de registro  
                        por parte da B3 - totalizando uma al√≠quota de 0,03%.  
                        Al√©m disso, h√° a incid√™ncia de IRPF retido na fonte, a uma al√≠quota de  
                        0,005%, sobre vendas comuns, ou de 1%, sobre ganhos em Day Trade.  
                        A calculadora retornar√° o custo total da opera√ß√£o realizada. ''')
        col1, col2 = st.columns(2)
        numero_acoes = col1.number_input('N√∫mero de A√ß√µes: ')
        custo_acoes = col2.number_input('Pre√ßo M√©dio das A√ß√µes: ')
        if st.button(':green[Calcular Custo Operacional]'):
            custo_operacional(numero_acoes, custo_acoes)

    # Regra do 72:
    with st.expander('üè¶ Calculadora da Regra do 72'):
        with st.popover("?"):
            st.markdown(''' Calcula o tempo aproximado, em anos, para que o valor investido   
                    seja duplicado, considerando a taxa de juros aplicada.''')
        taxa_juros = st.number_input('Taxa de Juros: ')
        if st.button(':green[Calcular]'):
            regra_72(taxa_juros)
    
    # Plotagem IPCA vs SELIC Hist√≥rico:
    with st.expander('üíπ IPCA vs SELIC desde 1998:'):
        with st.popover("?"):
                st.markdown(''' Ao longo dos anos a correla√ß√£o entre o IPCA e a SELIC se evidencia,  
                            representando uma tentaiva do governo (atrav√©s da SELIC) em conter a 
                            infla√ß√£o (medida pelo IPCA). Uma observa√ß√£o mais atenta pode desenhar
                            oportunidades de investimento, ou desinvestimento.''')
        # streamlit graph:
        get_macro_economics()



# Run main()
if __name__ == '__main__':
    main()
